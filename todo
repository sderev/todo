#!/usr/bin/python3

import json
from pathlib import Path

import click

# Constants for colored output
GREEN = "\x1b[38;5;10m"
RED = "\x1b[38;5;9m"
RESET = "\x1b[0m"

# Constants for the TODO file and folder
todo_folder = Path.home() / "TODO"
todo_file = todo_folder / ".todos.json"


@click.group()
def main():
    """Main function that groups all the commands."""
    pass


def setup_dir_and_file():
    """Creates folder and json file if they don't exist yet."""
    todo_folder.mkdir(exist_ok=True, parents=True)
    if not todo_file.exists():
        save_todos([])


def load_todos():
    """Loads the TODOs from the file and returns them as a list."""
    return json.loads(todo_file.read_text())


def save_todos(todos):
    """Saves the given TODOs list to the file."""
    json.dump(todos, todo_file.open("w"))


@main.command()
@click.argument("task", nargs=-1)
def add(task):
    """Adds a new task to the TODO list."""
    add_task(" ".join(task))


def add_task(task):
    """Adds a new task to the TODO list."""
    todos = load_todos()
    todos.append({"task": task, "completed": False})
    save_todos(todos)
    click.echo(f"Task added: {task}")


@main.command()
def list():
    """Lists all tasks in the TODO list. Note: 'list' is intentionally used as the function name for better CLI usability."""
    todos = load_todos()

    if not todos:
        click.echo("The TODO list is empty. ðŸ¥³")
        return

    click.echo("")

    for idx, task in enumerate(todos, 1):
        status = f"{GREEN}âœ“{RESET}" if task["completed"] else f"{RED}âœ—{RESET}"
        click.echo(f"{idx}. {status} {task['task']}")

    click.echo("")
    if all(task["completed"] for task in todos):
        click.echo("The TODO list has been completed. ðŸ˜ŽðŸ¥³")


@main.command()
@click.argument("indexes", type=int, nargs=-1)
def complete(indexes):
    """Marks the given tasks as completed."""
    todos = load_todos()
    for idx in indexes:
        if idx < 1 or idx > len(todos):
            click.echo(f"Invalid index: {idx}")
            continue
        if not todos[idx - 1]["completed"]:
            todos[idx - 1]["completed"] = True
            click.echo(f"Task completed: {todos[idx - 1]['task']}")
        else:
            click.echo(f"Task already completed: {todos[idx - 1]['task']}")
    save_todos(todos)


@main.command()
@click.argument("indexes", type=int, nargs=-1)
def delete(indexes):
    """Deletes the given tasks from the TODO list."""
    todos = load_todos()
    tasks_deleted = []
    for idx in sorted(indexes, reverse=True):
        if idx < 1 or idx > len(todos):
            click.echo(f"Invalid index: {idx}")
            continue
        task_deleted = todos.pop(idx - 1)
        tasks_deleted.append(task_deleted["task"])
    save_todos(todos)

    if tasks_deleted:
        for task in tasks_deleted:
            click.echo(f"Task deleted: {task}")
    else:
        click.echo("No tasks deleted.")


@main.command()
def clear():
    """Clears the TODO list."""
    save_todos([])
    click.echo("The TODO list has been cleared.")


@main.command()
def daily():
    """Adds daily tasks from a file to the TODO list."""
    try:
        with open("/home/sebastien/TODO/daily_tasks.txt", "r") as file:
            daily_tasks = [task.strip() for task in file.readlines()]
    except FileNotFoundError:
        click.echo("No ~/TODO/daily_tasks.txt file found.")
    else:
        for task in daily_tasks:
            todos = load_todos()
            if not any(task == todo["task"] for todo in todos):
                add_task(task)


if __name__ == "__main__":
    setup_dir_and_file()
    main()
